@page "/SearchMovies"
@using Sep6Client.Model
@using Sep6Client.Data.Movies
@using Sep6Client.Data.DataHelper
@using Sep6Client.Data.DataHelper.Search
@inject IMoviesService moviesService
@inject NavigationManager nav

<PageTitle>Search</PageTitle>
<h1>Search movies</h1>

<p><em>Enter a title to search for and press the 'Search' button.</em></p>

    <div>
        <InputText @bind-Value="searchText"></InputText>
        <button @onclick="SearchMoviesAsync">Search</button>
        <br/>
    </div>

@if (movies != null && movies.Movies.Count > 0)
{
    <div>
        <table class="table">
            <thead>
            <tr>
                <th>Title</th>
                <th>Rating</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var movie in movies.Movies)
            {
                var id = movie.Id;
                <tr>
                    <td><a href=# @onclick="() => OpenMovieDetails(id)">@movie.Title</a>&nbsp;&nbsp;&nbsp;</td>
                    <td>@movie.Rating/10</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    
    <div>
        @if (pageCounter > 1)
        {
            <button @onclick="OnLoadPreviousPage">@leftArrow-- Previous</button>
        }

        @if (pageCounter < movies.NrOfPages)
        {
            <button @onclick="OnLoadNextPage">Next --></button>
        }
     </div>
}
<p style="color: red">@errorMessage</p>

@code {
    private string searchText = "";
    private MovieList? movies;
    private int pageCounter = 1;
    private string errorMessage = "";
    private char leftArrow = '<';
    private Dictionary<SearchFilterOptions, string>? searchCriteria;

    protected override async Task OnInitializedAsync()
    {
        searchCriteria = new Dictionary<SearchFilterOptions, string>
        {
            {SearchFilterOptions.PageNr, pageCounter.ToString()},
            {SearchFilterOptions.Text, searchText},
            {SearchFilterOptions.SortBy, QueryHelper.GetSortByOptions().First()}
        };

        await SearchMoviesAsync();
    }

    private async Task SearchMoviesAsync()
    {
        UpdateSearchCriteria();
        
        try
        {
            movies = await moviesService.GetFilteredMoviesAsync(searchCriteria);
        }
        catch(Exception e)
        {
            errorMessage = $"Exception thrown: {e.GetType()}\n{e.StackTrace}";
            await Console.Out.WriteLineAsync(e.StackTrace);
        }
    }

    private void UpdateSearchCriteria()
    {
        searchCriteria[SearchFilterOptions.PageNr] = pageCounter.ToString();
        searchCriteria[SearchFilterOptions.Text] = searchText;
        Console.WriteLine($"Updating search criteria...\nPage count = {pageCounter}\nSearch text: {searchText}\n---------------------\n");
    }

    private async Task OnLoadNextPage()
    {
        pageCounter++;
        await SearchMoviesAsync();
    }

    private async Task OnLoadPreviousPage()
    {
        pageCounter--;
        await SearchMoviesAsync();
    }

    private void OpenMovieDetails(int id)
    {
        // TODO: Add page number to cookies to navigate back to same page - Ald√≠s 18.05.23
        nav.NavigateTo($"/MovieDetails/{id}");
    }
}