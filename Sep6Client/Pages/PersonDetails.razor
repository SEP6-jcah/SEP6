@page "/PersonDetails/{Id:int}"
@using Sep6Client.Model
@using Sep6Client.Data.Person
@using Sep6Client.Data.Movies
@inject IPersonService personService
@inject IMoviesService moviesService
@inject NavigationManager nav

<PageTitle>Person Details</PageTitle>

@if (person == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1><b>@person.Name</b></h1>
    @if (person.Aka is {Length: > 0})
    {
        <p><b>Also known as:</b> @GetPrettifiedAliases()</p>
    }
    <p><b>ID:</b> @Id</p>
    @if (!string.IsNullOrWhiteSpace(person.Birthday))
    {
        <p><b>Birthday: </b>@person.Birthday</p>
    }
    <p><b>Job: </b>@person.Job</p>
    <p>@person.Biography</p>
    @if (person.KnownFor.ActorCredits is {Count: > 0})
    {
        <br/>
        <p><b>Average rating of movies: </b>@person.KnownFor.ActorMovieRatingAverage/10</p>
        <label><b>Movies acted in:</b></label>
        <ul>
            @foreach(var item in person.KnownFor.ActorCredits)
            {
                var movieId = item.MovieId;
                <li><a href=# @onclick="() => OpenMovieDetails(movieId)">@item.MovieTitle</a>@GetCharacterOrNot(item.Character)</li>
            }
        </ul>
    }
    @if (person.KnownFor.CrewCredits is {Count: > 0})
    {
        <br/>
        <p><b>Average rating of movies: </b>@person.KnownFor.CrewMovieRatingAverage/10</p>
        <label><b>Movies worked on:</b></label>
        <ul>
            @foreach(var item in person.KnownFor.CrewCredits)
            {
                var movieId = item.MovieId;
                <li><a href=# @onclick="() => OpenMovieDetails(movieId)">@item.MovieTitle</a> (@GetCrewJobOrNot(item.Job)@item.Department)</li>
            }
        </ul>
    }
}

<p style="color: red">@errorMessage</p>

@code {
    [Parameter]
    public int Id { get; set; }
    private Person? person;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            person = await personService.GetPersonByIdAsync(Id);
        }
        catch (Exception e)
        {
            errorMessage = $"Exception thrown: {e.GetType()}\n{e.StackTrace}";
            await Console.Out.WriteLineAsync(e.StackTrace);
        }
    }

    private void OpenMovieDetails(int movieId)
    {
        nav.NavigateTo($"/MovieDetails/{movieId}");
    }

    private string GetPrettifiedAliases()
    {
        var temp = person.Aka.Aggregate("", (current, alias) => current + $"{alias}, ");

        // Removing last two characters if there are any directors
        return string.IsNullOrWhiteSpace(temp) ? temp : temp[..^2];
    }

    private string GetCharacterOrNot(string? character)
    {
        return !string.IsNullOrWhiteSpace(character) ? $" as {character}" : string.Empty;
    }

    private string GetCrewJobOrNot(string? job)
    {
        return !string.IsNullOrWhiteSpace(job) ? $"{job} in ": string.Empty;
    }
}